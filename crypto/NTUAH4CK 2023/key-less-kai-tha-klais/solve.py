from base64 import b64encode, b64decode

enc = [894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 31, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 13, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 13, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 32, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 32, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 76, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 31, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 76, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 76, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 4, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 32, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 32, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 31, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 50, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 32, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 76, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 41, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 32, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 41, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 50, 894, 1484, 22, 894, 1484, 53, 894, 1484, 22, 894, 1484, 59, 894, 1484, 22, 894, 1484, 31, 894, 1484, 22, 894, 1484, 59, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 32, 894, 1484, 59, 894, 1484, 4, 894, 1484, 22, 894, 1484, 22, 894, 1484, 22, 894, 1484, 76]

def decrypt2(e):
    return ((e ^ (337 + 1337)) + 37) // 7

def encrypt2(n):
    return n*7 - 37 ^ 337 + 1337

d = {}

for n in set(enc):
    for b in range(256):
        if encrypt2(b) == n:
            d[n] = b

enc1 = [d[n] for n in enc]

msg = bytes(enc1)

while b'NH4CK{' not in msg:
    msg = b64decode(bytes.fromhex(b64encode(msg).decode()))

print(msg)