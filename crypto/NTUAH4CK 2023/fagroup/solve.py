from Crypto.Util.number import *

n = 142829528763805699857542233635011565789709504905698135923529590694545444315326567845469043841603447461822622170686363460371930363927327236001683910150983816569562129963300305571745228528229257966994498448633379749850923149040629616332024377579262234025580455223012093875998423154894040364167887925859745336557
o = 37707689409093918855854078482105300715753037083483679716333774382530063354970586797606668771374004054430403261559763120731236205265668441930414743
c = 62244765642124693925452218053588298373027026087050588231772935070949523914497511619635142296225679214938973985554763413186777367874133050710931536501033894674668584193797208425804831741205409729247732964757678520476265649979959855344878224979215085474804291389637148669566919945656645161660639132076060567493
e = 65537

pr = [i for i in range(32, 64) if isPrime(i)]

for p1 in pr:
    for p2 in pr:
        for p3 in pr:
            for p4 in pr:
                for p5 in pr:
                    prd = p1 * p2 * p3 * p4 * p5
                    p = 2*o*prd + 1
                    if n % p == 0:
                        q = n // p
                        assert n == p * q
                        print(f'{p = }')
                        print(f'{q = }')
                        phi = (p-1)*(q-1)
                        d = pow(e, -1, phi)
                        flag = pow(c, d, n)
                        print(long_to_bytes(flag))
                        exit()
