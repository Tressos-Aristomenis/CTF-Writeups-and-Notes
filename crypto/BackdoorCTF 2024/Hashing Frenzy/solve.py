from pwn import remote
from Crypto.Util.number import GCD, bytes_to_long, isPrime, long_to_bytes
from sage.all import *
import hashlib

class testhash:
    def __init__(self, data):
        self.data = data

    def digest(self):
        return self.data 

hashes = []
hashes.append(testhash) 
hashes.append(hashlib.md5)
hashes.append(hashlib.sha224)
hashes.append(hashlib.sha256)
hashes.append(hashlib.sha3_224)
hashes.append(hashlib.sha3_256)

def generate_nonreduced_accumulate(message, sigs):
    accumulate = 0
    for i, hash_object in enumerate(hashes):
        sig = sigs[i]
        accumulate += bytes_to_long(hash_object(message).digest()) * sig
    return accumulate

def get_data():
    io.recvuntil(b'with a sample message.\n')
    flag_sigs = eval(io.recvline().strip().decode())
    io.sendlineafter(b"choice: ", b'1')
    io.sendlineafter(b"signed: ", msg)
    m1_sigs = eval(io.recvline().strip().decode())
    io.sendlineafter(b"choice: ", b'1')
    io.sendlineafter(b"signed: ", msg)
    m2_sigs = eval(io.recvline().strip().decode())
    return flag_sigs, m1_sigs, m2_sigs

def recover_p(accumulate1, accumulate2, m1_sigs, m2_sigs):
    p = GCD(accumulate1 - m1_sigs[-1], accumulate2 - m2_sigs[-1])
    for i in range(2, 10**6):
        if p % i == 0:
            p //= i
    if isPrime(p) and 2047 <= p.bit_length() <= 2048:
        return p
    else:
        print('[-] fail')

def Babai_CVP(B, target):
    assert B.ncols() == len(target)
    from sage.modules.free_module_integer import IntegerLattice
    M = IntegerLattice(B, lll_reduce=True).reduced_basis
    G = M.gram_schmidt()[0]
    small = target
    for i in reversed(range(G.nrows())):
        small -= M[i] * ((small * G[i]) / (G[i] * G[i])).round()
    return target - small

def svp_approach(H, acc, p):
    I = identity_matrix(QQ, len(hashes)+1)
    HM = matrix(QQ, H + [p]).T
    U = I.augment(HM)
    BT = vector(QQ, [0] * (len(hashes) + 1) + [-acc])
    M = U.stack(BT)
    L = M.LLL()
    # print(L[0])
    flag = abs(int(L[0][0]))
    return long_to_bytes(flag)

def svp_approach_2(H, acc, p):
    I = identity_matrix(QQ, len(hashes)+1)
    HM = matrix(QQ, H + [-acc]).T
    U = I.augment(HM)
    U[-1, -2] = 2**256  # scale
    BT = vector(QQ, [0] * (len(hashes) + 1) + [p])
    M = U.stack(BT)
    L = M.LLL()
    # print(L[0])
    flag = abs(int(L[0][0]))
    return long_to_bytes(flag)

def cvp_approach(H, acc, p):
    # CVP Approach
    I = identity_matrix(len(hashes))
    HM = matrix(H).T
    U = I.augment(HM)
    BT = matrix([0] * len(hashes) + [p])
    # important note : WHEN DOING CVP, IT'S NOT GOOD TO HAVE 0's IN TARGET VECTOR!
    M = U.stack(BT)
    target = vector(ZZ, [2**256, 2**128, 2**224, 2**256, 2**224, 2**256, acc])
    R = Babai_CVP(M, target)
    # print(R[0])
    flag = abs(int(R[0]))
    return long_to_bytes(flag)


msg = b'r4sti'

io = remote('34.42.147.172', 8007, level='error')
flag_sigs, m1_sigs, m2_sigs = get_data()
accumulate1 = generate_nonreduced_accumulate(msg, m1_sigs)
accumulate2 = generate_nonreduced_accumulate(msg, m2_sigs)
p = recover_p(accumulate1, accumulate2, m1_sigs, m2_sigs)
acc = flag_sigs[-1]
H = flag_sigs[:-1]


# p = 22891483829938201894263685005088184032836909892474413464671626350433155903325688510542970563781103170508899826255854225485092624875810361068573856303922252570627001486399716435439951125432944296922278824208422250000817875754219886019469709227147113869509328026521520373438000891298756327049903689688027561227761926690904487183033478317234414249105530220335301607728773161635629079853288875477068735671430061714372575917629223235346041585144925045874791349765697105645295686745476355100034315525583389077972313529339536201391530466717443685541314687313722652910471621349284046544336556376889610101735664640577041229923
# H = [[14627722458225062064203436573176759691093938091673661398710698836311990016617085257357191743312074427462048395103841975692195564373316735510946165893365088179052513623297776310802108393380407101935331989420601167632230773668386991208648762801081645864159005344116351682394559696890638428136199988361375696932565124292656967917493065218460358196325096693980282428088064875489402641765831305914937792854138348070375550782882475524211133481685747510238950359345642697751261728148591949160901843303473350045098894020264981291693384016383810857656637472584655542234961692204477971804807701573435350083362351836259990043488, 19704467697763811703822852067722898138438367629024352111822939666926437783512542766107479811990503425170962585482634672115432310609301354152626431101846433402029295303240119475455261715700541815170013167967150037321995140010279965977918811417705463969666294806685401332773300117121848051085956296143202123197940593956745933460158036114207579399078136096546962879618272741505442276098185247501376822732037557409975350948568054419215605691215828574045888698686728919872537061421822359567444101806320602852632196122534583501910525770473640196689346514140781484130491207898335959652892543001381475824409049700638016470946, 18456853496235899679663133354435976537254722304355705360869503335397845688363982195386847230163104852931850602628718307161800562830360871821151046431265287248492325743997739817913435538120363965561685953301671367716382469290678255419640618575799313852368608371108244055300467633368702884686422195611692492560693016588579224968895777543097533568122205955959729581570465947296667321140563046986582095790562102956217427520259500542208824561864145895820541421209880760683309652474190727841961438233756220155769893745145626127731600351443906065101787856561830156544151245631983070327682566066985696246451341949648141272324, 1576751577389181270863661763346854213139426198632493974661471617349492471580991466138241209438943073541414746799804177557740838076798644362147115291955321468848517398105758564773591067773580996576654731722319185027584218183302782197880617312585378825294851927448462254545244318300775690352026394610314499542887880039657802626141929899810707009013498054235603330137318498530898926461201642066494375554179215179548463907952119905729552587252372272139872596948469881905138642229714051422084351734943488409355567861170979321753316427127193016117470790619530574611206936037259433634142572996186240272101264908438554492082, 2192263976740694034883613750287219753907669924864363084576730350847465750104338772085912188413051841437468279393619959540975624561646174568176788292291008868420513352745110024748778664007380761041105571326257251283056182701587943975884814853958033015421907706815026267254072594895372026774290111709888863403439831304267284628550740690112510669573376471830273392654876725542115855557357252056569623389531634315963055697239932463188592332548824533019031632101325548601435843630891911917607726896560167058257019046946373252748749284807008371301232760224909989178206540235631991879165601270177979767967161594942907498166, 17150053934237842928032050359619959418932486522974206707132475335062138761550755780655963627952659339208846407181223710211408308708587439382724011905206076291244993746494904736715633613356939438264502944293091097460793755506766198987245208106539720982068106656661131024314146048002502094740248050833412935042706156822803443998562962885326806907990015176099265106010905455581338743114337508992376458892154247617792410729662590062790273665513840819624774876161912149254360486096222142801105613105808676485633025296600223612493994776170120330742774592034549418356335718524369390067062427774241018993281299140452797434408]]
# acc = 48911170339932108013619485718407510367892447794792267935080828550259429009087094840546760649202737768887965367560824173815925167093584802995045480901320956581560002877396753186042687762670165406679210923009588244233506723056455864861467069619305079410363205804749852406712544677581254447296668231428972773607666397098772112388048760495377779243295009939980812022921662292510172072761693027121859641367893074500696251520030604911216339485263866502885184043858887300510599875422170899443259698459346020550049153415005928378278014411878775673693125888128402223380942730091302013331151085677287180296798600807422752017057

# print(svp_approach(H, acc, p))
print(svp_approach_2(H, acc, p))
print(svp_approach_3(H, acc, p))
print(cvp_approach(H, acc, p))